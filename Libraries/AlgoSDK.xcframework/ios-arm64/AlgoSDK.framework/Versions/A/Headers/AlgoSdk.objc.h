// Objective-C API for talking to github.com/algorand/go-mobile-algorand-sdk/v2/sdk Go package.
//   gobind -lang=objc -prefix="Algo" github.com/algorand/go-mobile-algorand-sdk/v2/sdk
//
// File is generated by gobind. Do not edit.

#ifndef __AlgoSdk_H__
#define __AlgoSdk_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class AlgoSdkABIType;
@class AlgoSdkAddMethodCallParams;
@class AlgoSdkAppBoxRefArray;
@class AlgoSdkAtomicTransactionComposer;
@class AlgoSdkBytesArray;
@class AlgoSdkEncryption;
@class AlgoSdkInt64Array;
@class AlgoSdkLogicSigAccount;
@class AlgoSdkMultisigAccount;
@class AlgoSdkStringArray;
@class AlgoSdkSuggestedParams;
@class AlgoSdkUint64;
@protocol AlgoSdkTransactionSigner;
@class AlgoSdkTransactionSigner;

@protocol AlgoSdkTransactionSigner <NSObject>
- (BOOL)equals:(id<AlgoSdkTransactionSigner> _Nullable)other;
- (AlgoSdkBytesArray* _Nullable)signTransactions:(AlgoSdkBytesArray* _Nullable)txGroup indexesToSign:(AlgoSdkInt64Array* _Nullable)indexesToSign error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * ABIType represents an ARC-4 ABI type.
 */
@interface AlgoSdkABIType : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Decode takes an encoded ABI value and decodes it into a JSON string.

The JSON format for ABI values is the same as the format used by `goal app method --arg <argument>`.

See `MarshalToJSON` and UnmarshalFromJSON from https://github.com/algorand/avm-abi/blob/3ac8977d88f2937721d1602027dde17f450e62dd/abi/json.go
for more information about how the JSON values are handled.
 */
- (NSString* _Nonnull)decode:(NSData* _Nullable)encodedValue error:(NSError* _Nullable* _Nullable)error;
/**
 * Encode takes an ABI value in JSON format and encodes it into a byte array.

The JSON format for ABI values is the same as the format used by `goal app method --arg <argument>`.

See `MarshalToJSON` and UnmarshalFromJSON from https://github.com/algorand/avm-abi/blob/3ac8977d88f2937721d1602027dde17f450e62dd/abi/json.go
for more information about how the JSON values are handled.
 */
- (NSData* _Nullable)encode:(NSString* _Nullable)jsonValue error:(NSError* _Nullable* _Nullable)error;
/**
 * String returns the string representation of the ABIType.
 */
- (NSString* _Nonnull)string;
@end

/**
 * AddMethodCallParams contains the parameters for the method `AtomicTransactionComposer.AddMethodCall`
 */
@interface AlgoSdkAddMethodCallParams : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAddMethodCallParams creates a new AddMethodCallParams object.

onComplete is the OnCompletion action to take for this application call. The accepted values are:
* 0 - NoOp
* 1 - OptIn
* 2 - CloseOut
* 3 - ClearState
* 4 - UpdateApplication
* 5 - DeleteApplication
 */
- (nullable instancetype)init:(int64_t)appID onComplete:(long)onComplete methodJson:(NSString* _Nullable)methodJson accounts:(AlgoSdkStringArray* _Nullable)accounts foreignApps:(AlgoSdkInt64Array* _Nullable)foreignApps foreignAssets:(AlgoSdkInt64Array* _Nullable)foreignAssets boxRefs:(AlgoSdkAppBoxRefArray* _Nullable)boxRefs txnParams:(AlgoSdkSuggestedParams* _Nullable)txnParams note:(NSData* _Nullable)note sender:(NSString* _Nullable)sender signer:(id<AlgoSdkTransactionSigner> _Nullable)signer;
/**
 * AddAppSchema adds global schema, local schema, and extra pages to the method call. Only needed for app creation.
 */
- (BOOL)addAppSchema:(int64_t)globalSchemaUint globalSchemaByteSlice:(int64_t)globalSchemaByteSlice localSchemaUint:(int64_t)localSchemaUint localSchemaByteSlice:(int64_t)localSchemaByteSlice extraPages:(int32_t)extraPages error:(NSError* _Nullable* _Nullable)error;
/**
 * AddMethodArgument adds an ABI argument to the method call. This uses the same format as `ABIType.Encode()`
for the argument value. This method can handle basic and reference ABI types, but not transaction
argument types. See `AddMethodArgumentTransaction()` for transaction type support.
 */
- (BOOL)addMethodArgument:(NSString* _Nullable)valueJson error:(NSError* _Nullable* _Nullable)error;
/**
 * AddMethodArgumentTransaction adds a transaction ABI argument argument to the method call.
 */
- (BOOL)addMethodArgumentTransaction:(NSData* _Nullable)encodedTx signer:(id<AlgoSdkTransactionSigner> _Nullable)signer error:(NSError* _Nullable* _Nullable)error;
/**
 * AddPrograms adds the approval and clear state programs to the method call. Only needed for app
creation or update.
 */
- (void)addPrograms:(NSData* _Nullable)approvalProgram clearStateProgram:(NSData* _Nullable)clearStateProgram;
@end

@interface AlgoSdkAppBoxRefArray : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (BOOL)append:(int64_t)appID boxName:(NSData* _Nullable)boxName error:(NSError* _Nullable* _Nullable)error;
// skipped method AppBoxRefArray.Extract with unsupported parameter or return types

- (int64_t)getAppID:(long)index;
- (NSData* _Nullable)getBoxName:(long)index;
- (long)length;
- (BOOL)set:(long)index appID:(int64_t)appID boxName:(NSData* _Nullable)boxName error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * AtomicTransactionComposer is a class for constructing and signing atomic transaction groups.
 */
@interface AlgoSdkAtomicTransactionComposer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAtomicTransactionComposer creates a new AtomicTransactionComposer.
 */
- (nullable instancetype)init;
/**
 * AddMethodCall adds a smart contract method call to this atomic group.

An error will be thrown if the composer's status is not BUILDING, if adding this transaction
causes the current group to exceed MaxAtomicGroupSize (16), or if the provided arguments are invalid
for the given method.
 */
- (BOOL)addMethodCall:(AlgoSdkAddMethodCallParams* _Nullable)params error:(NSError* _Nullable* _Nullable)error;
/**
 * AddTransaction adds a transaction to this atomic group.

An error will be thrown if the composer's status is not BUILDING, or if adding this transaction
causes the current group to exceed MaxAtomicGroupSize (16).
 */
- (BOOL)addTransaction:(NSData* _Nullable)encodedTx signer:(id<AlgoSdkTransactionSigner> _Nullable)signer error:(NSError* _Nullable* _Nullable)error;
/**
 * BuildGroup finalizes the transaction group and returns the finalized unsigned transactions.

The composer's status will be at least BUILT after executing this method.
 */
- (AlgoSdkBytesArray* _Nullable)buildGroup:(NSError* _Nullable* _Nullable)error;
/**
 * Clone creates a new composer with the same underlying transactions. The new composer's status will
be BUILDING, so additional transactions may be added to it.
 */
- (AlgoSdkAtomicTransactionComposer* _Nullable)clone;
/**
 * Count returns the number of transactions currently in this atomic group.
 */
- (long)count;
/**
 * GatherSignatures obtains signatures for each transaction in this group. If signatures have
already been obtained, this method will return cached versions of the signatures.

The composer's status will be at least SIGNED after executing this method.

An error will be thrown if signing any of the transactions fails. Otherwise, this will return an
array of signed transactions.
 */
- (AlgoSdkBytesArray* _Nullable)gatherSignatures:(NSError* _Nullable* _Nullable)error;
/**
 * GetStatus returns the status of this composer's transaction group.

The values that may be returned are:
* 0 - BUILDING: The atomic group is still under construction.
* 1 - BUILT: The atomic group has been finalized, but not yet signed.
* 2 - SIGNED: The atomic group has been finalized and signed.

Once a composer's status is at least BUILT, it may no longer be modified. A composer may advance
to higher status levels, but it may never regress to lower status levels. If you wish to modify
a composer that has already been BUILT, use `Clone()` to create a copy.
 */
- (long)getStatus;
@end

@interface AlgoSdkBytesArray : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (void)append:(NSData* _Nullable)value;
// skipped method BytesArray.Extract with unsupported parameter or return types

/**
 * Flatten returns a single byte array containing all the contained byte arrays, in order.
 */
- (NSData* _Nullable)flatten;
- (NSData* _Nullable)get:(long)index;
- (long)length;
- (void)set:(long)index value:(NSData* _Nullable)value;
@end

@interface AlgoSdkEncryption : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSData* _Nullable encryptedData;
@property (nonatomic) NSData* _Nullable decryptedData;
@property (nonatomic) long errorCode;
@end

@interface AlgoSdkInt64Array : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (void)append:(int64_t)value;
// skipped method Int64Array.Extract with unsupported parameter or return types

- (int64_t)get:(long)index;
- (long)length;
- (void)set:(long)index value:(int64_t)value;
@end

/**
 * LogicSigAccount represents a LogicSig account
 */
@interface AlgoSdkLogicSigAccount : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Address returns the address over which this LogicSigAccount has authority.

If the LogicSig is delegated to another account, this will return the address
of that account.

If the LogicSig is not delegated to another account, this will return an
escrow address that is the hash of the LogicSig's program code.
 */
- (NSString* _Nonnull)address:(NSError* _Nullable* _Nullable)error;
/**
 * AppendAttachMultisigSignature adds an additional signature from a member of the
delegating multisig account. This version of the function requires you to provide the signer's
address, `signer`, and its signature over the program, `signature`. See LogicSigProgramForSigning
to calculate the bytes that must be signed. If you instead wish to provide the private key directly,
see AppendSignMultisigSignature.

The LogicSigAccount must represent a delegated LogicSig backed by a multisig
account.
 */
- (BOOL)appendAttachMultisigSignature:(NSString* _Nullable)signer signature:(NSData* _Nullable)signature error:(NSError* _Nullable* _Nullable)error;
/**
 * AppendSignMultisigSignature adds an additional signature from a member of the
delegating multisig account. This version of the function uses the passed in private key to
calculate the signature; if you instead wish to provide the signature, see AppendAttachMultisigSignature.

The LogicSigAccount must represent a delegated LogicSig backed by a multisig
account.
 */
- (BOOL)appendSignMultisigSignature:(NSData* _Nullable)signerSk error:(NSError* _Nullable* _Nullable)error;
/**
 * IsDelegated returns true if and only if the LogicSigAccount has been delegated to
another account with a signature.
 */
- (BOOL)isDelegated;
/**
 * ToJSON returns a JSON serialization of a LogicSigAccount. See DeserializeLogicSigAccountFromJSON for
deserialization.
 */
- (NSString* _Nonnull)toJSON;
@end

/**
 * MultiSigAccount represents a MultiSig account
 */
@interface AlgoSdkMultisigAccount : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Address generates the corresponding account address for this MultisigAccount
 */
- (NSString* _Nonnull)address:(NSError* _Nullable* _Nullable)error;
/**
 * ContributingAddresses returns the individual addresses that make up this MultisigAccount
 */
- (AlgoSdkStringArray* _Nullable)contributingAddresses;
/**
 * Threshold returns the threshold of this MultisigAccount
 */
- (long)threshold;
/**
 * Version returns the version of this MultisigAccount
 */
- (long)version;
@end

@interface AlgoSdkStringArray : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (void)append:(NSString* _Nullable)value;
// skipped method StringArray.Extract with unsupported parameter or return types

- (NSString* _Nonnull)get:(long)index;
- (long)length;
- (void)set:(long)index value:(NSString* _Nullable)value;
@end

@interface AlgoSdkSuggestedParams : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Fee is the suggested transaction fee
Fee is in units of micro-Algos per byte.
Fee may fall to zero but transactions must still have a fee of
at least MinTxnFee for the current network protocol.
 */
@property (nonatomic) int64_t fee;
/**
 * Genesis ID
 */
@property (nonatomic) NSString* _Nonnull genesisID;
/**
 * Genesis hash
 */
@property (nonatomic) NSData* _Nullable genesisHash;
/**
 * FirstRoundValid is the first protocol round on which the txn is valid
 */
@property (nonatomic) int64_t firstRoundValid;
/**
 * LastRoundValid is the final protocol round on which the txn may be committed
 */
@property (nonatomic) int64_t lastRoundValid;
/**
 * FlatFee indicates whether the passed fee is per-byte or per-transaction
 */
@property (nonatomic) BOOL flatFee;
@end

@interface AlgoSdkUint64 : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) int64_t upper;
@property (nonatomic) int64_t lower;
// skipped method Uint64.Extract with unsupported parameter or return types

@end

/**
 * ABIMethodJSONFromSignature takes a method signature and returns the JSON representation of the method.
 */
FOUNDATION_EXPORT NSString* _Nonnull AlgoSdkABIMethodJSONFromSignature(NSString* _Nullable signature, NSError* _Nullable* _Nullable error);

/**
 * GetProgramAddress returns the escrow account address for a program, derived from its TEAL bytecode.
 */
FOUNDATION_EXPORT NSString* _Nonnull AlgoSdkAddressFromProgram(NSData* _Nullable program);

/**
 * AssignGroupID computes and return list of encoded transactions with Group field set.
 */
FOUNDATION_EXPORT AlgoSdkBytesArray* _Nullable AlgoSdkAssignGroupID(AlgoSdkBytesArray* _Nullable txns, NSError* _Nullable* _Nullable error);

/**
 * AttachMultisigSignature attaches a single signature to a transaction from a MultisigAccount. The
transaction will only be properly signed once the MultiSigAccount threshold has been reached.
MergeMultisigTransactions can be used to merge multiple partially-signed transactions into a
single transaction.

The argument `signer` must be one of the contributing addresses of the MultisigAccount, and
`signature` must be a signature of the transaction from that address.
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkAttachMultisigSignature(NSString* _Nullable signer, NSData* _Nullable signature, AlgoSdkMultisigAccount* _Nullable account, NSData* _Nullable encodedTx, NSError* _Nullable* _Nullable error);

/**
 * AttachSignature accepts a signature and a transaction, and returns the bytes of a the signed transaction
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkAttachSignature(NSData* _Nullable signature, NSData* _Nullable encodedTx, NSError* _Nullable* _Nullable error);

/**
 * AttachSignatureWithSigner accepts a signature, a transaction, and a signer address and returns the bytes of a the signed transaction
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkAttachSignatureWithSigner(NSData* _Nullable signature, NSData* _Nullable encodedTx, NSString* _Nullable signer, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT AlgoSdkEncryption* _Nullable AlgoSdkDecrypt(NSData* _Nullable data, NSData* _Nullable sk);

/**
 * DeserializeLogicSigAccountFromJSON deserializes a LogicSigAccount from a JSON string. See
LogicSigAccount.ToJSON for serialization.
 */
FOUNDATION_EXPORT AlgoSdkLogicSigAccount* _Nullable AlgoSdkDeserializeLogicSigAccountFromJSON(NSString* _Nullable jsonStr, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT AlgoSdkEncryption* _Nullable AlgoSdkEncrypt(NSData* _Nullable data, NSData* _Nullable sk);

/**
 * ExtractLogicSigAccountFromSignedTransaction extracts a LogicSigAccount from a signed transaction.
This will return nil if the transaction was not signed by a LogicSig account.
 */
FOUNDATION_EXPORT AlgoSdkLogicSigAccount* _Nullable AlgoSdkExtractLogicSigAccountFromSignedTransaction(NSData* _Nullable encodedSignedTx, NSError* _Nullable* _Nullable error);

/**
 * ExtractMultisigAccountFromSignedTransaction extracts a MultisigAccount from a signed transaction.
This will return nil if the transaction was not signed by a multisig account.
 */
FOUNDATION_EXPORT AlgoSdkMultisigAccount* _Nullable AlgoSdkExtractMultisigAccountFromSignedTransaction(NSData* _Nullable encodedSignedTx, NSError* _Nullable* _Nullable error);

/**
 * FindAndVerifyTxnGroups takes an array of encoded transactions and finds and verifies consecutive
transactions which claim to be an atomic group. It returns an array of integers which is the same
length as the array of input transactions. If two indexes in this array have the same value, then
the transactions at the same indexes in the input array are in the same atomic group.
 */
FOUNDATION_EXPORT AlgoSdkInt64Array* _Nullable AlgoSdkFindAndVerifyTxnGroups(AlgoSdkBytesArray* _Nullable txns, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull AlgoSdkFromKey(NSData* _Nullable key, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull AlgoSdkGenerateAddressFromPublicKey(NSData* _Nullable pk, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull AlgoSdkGenerateAddressFromSK(NSData* _Nullable sk, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSData* _Nullable AlgoSdkGenerateCipherKey(NSString* _Nullable key, NSData* _Nullable input);

FOUNDATION_EXPORT NSData* _Nullable AlgoSdkGeneratePrivateKey(void);

FOUNDATION_EXPORT NSData* _Nullable AlgoSdkGenerateSK(void);

/**
 * GetABIMethodSignature takes a method JSON representation and returns the method signature.
 */
FOUNDATION_EXPORT NSString* _Nonnull AlgoSdkGetABIMethodSignature(NSString* _Nullable methodJSON, NSError* _Nullable* _Nullable error);

/**
 * GetTxID takes an encoded txn and return the txid as string
 */
FOUNDATION_EXPORT NSString* _Nonnull AlgoSdkGetTxID(NSData* _Nullable encodedTxn);

FOUNDATION_EXPORT BOOL AlgoSdkIsValidAddress(NSString* _Nullable addr);

/**
 * LogicSigProgramForSigning returns the bytes that should be signed for a delegated LogicSig.
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkLogicSigProgramForSigning(NSData* _Nullable program);

/**
 * MakeApplicationClearStateTx makes a transaction for clearing out all
account-specific state for an application. It may not be rejected by the
application's logic. (see above for args desc.)
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeApplicationClearStateTx(int64_t appIdx, AlgoSdkBytesArray* _Nullable appArgs, AlgoSdkStringArray* _Nullable accounts, AlgoSdkInt64Array* _Nullable foreignApps, AlgoSdkInt64Array* _Nullable foreignAssets, AlgoSdkAppBoxRefArray* _Nullable boxRefs, AlgoSdkSuggestedParams* _Nullable params, NSString* _Nullable sender, NSData* _Nullable note, NSError* _Nullable* _Nullable error);

/**
 * MakeApplicationCloseOutTx makes a transaction for closing out of
(deallocating all account-specific state for) an application (see above for args desc.)
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeApplicationCloseOutTx(int64_t appIdx, AlgoSdkBytesArray* _Nullable appArgs, AlgoSdkStringArray* _Nullable accounts, AlgoSdkInt64Array* _Nullable foreignApps, AlgoSdkInt64Array* _Nullable foreignAssets, AlgoSdkAppBoxRefArray* _Nullable boxRefs, AlgoSdkSuggestedParams* _Nullable params, NSString* _Nullable sender, NSData* _Nullable note, NSError* _Nullable* _Nullable error);

/**
 * MakeApplicationCreateTx makes a transaction for creating an application (see below for args desc.)

- optIn:        true for opting in on complete, false for no-op.

- accounts      lists the accounts (in addition to the sender) that may be accessed
                from the application logic.

- appArgs       ApplicationArgs lists some transaction-specific arguments accessible
                from application logic.

- appIdx        ApplicationID is the application being interacted with, or 0 if
                creating a new application.

- approvalProg  ApprovalProgram determines whether or not this ApplicationCall
                transaction will be approved or not.

- clearProg     ClearStateProgram executes when a clear state ApplicationCall
                transaction is executed. This program may not reject the
                transaction, only update state.

- foreignApps   lists the applications (in addition to txn.ApplicationID) whose global
                states may be accessed by this application. The access is read-only.

- foreignAssets lists the assets whose global state may be accessed by this application. The access is read-only.

- boxRefs	   lists the boxes which be accessed by this application call.

- globalSchema  GlobalStateSchema sets limits on the number of strings and
                integers that may be stored in the GlobalState. The larger these
                limits are, the larger minimum balance must be maintained inside
                the creator's account (in order to 'pay' for the state that can
                be used). The GlobalStateSchema is immutable.

- localSchema   LocalStateSchema sets limits on the number of strings and integers
                that may be stored in an account's LocalState for this application.
                The larger these limits are, the larger minimum balance must be
                maintained inside the account of any users who opt into this
                application. The LocalStateSchema is immutable.

- extraPages    ExtraProgramPages specifies the additional app program size requested in pages.
                A page is 1024 bytes. This field enables execution of app programs
                larger than the default maximum program size.

- onComplete    This is the faux application type used to distinguish different
                application actions. Specifically, OnCompletion specifies what
                side effects this transaction will have if it successfully makes
                it into a block.
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeApplicationCreateTx(BOOL optIn, NSData* _Nullable approvalProg, NSData* _Nullable clearProg, int64_t globalSchemaUint, int64_t globalSchemaByteSlice, int64_t localSchemaUint, int64_t localSchemaByteSlice, int32_t extraPages, AlgoSdkBytesArray* _Nullable appArgs, AlgoSdkStringArray* _Nullable accounts, AlgoSdkInt64Array* _Nullable foreignApps, AlgoSdkInt64Array* _Nullable foreignAssets, AlgoSdkAppBoxRefArray* _Nullable boxRefs, AlgoSdkSuggestedParams* _Nullable params, NSString* _Nullable sender, NSData* _Nullable note, NSError* _Nullable* _Nullable error);

/**
 * MakeApplicationDeleteTx makes a transaction for deleting an application (see above for args desc.)
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeApplicationDeleteTx(int64_t appIdx, AlgoSdkBytesArray* _Nullable appArgs, AlgoSdkStringArray* _Nullable accounts, AlgoSdkInt64Array* _Nullable foreignApps, AlgoSdkInt64Array* _Nullable foreignAssets, AlgoSdkAppBoxRefArray* _Nullable boxRefs, AlgoSdkSuggestedParams* _Nullable params, NSString* _Nullable sender, NSData* _Nullable note, NSError* _Nullable* _Nullable error);

/**
 * MakeApplicationNoOpTx makes a transaction for interacting with an existing
application, potentially updating any account-specific local state and
global state associated with it. (see above for args desc.)
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeApplicationNoOpTx(int64_t appIdx, AlgoSdkBytesArray* _Nullable appArgs, AlgoSdkStringArray* _Nullable accounts, AlgoSdkInt64Array* _Nullable foreignApps, AlgoSdkInt64Array* _Nullable foreignAssets, AlgoSdkAppBoxRefArray* _Nullable boxRefs, AlgoSdkSuggestedParams* _Nullable params, NSString* _Nullable sender, NSData* _Nullable note, NSError* _Nullable* _Nullable error);

/**
 * MakeApplicationOptInTx makes a transaction for opting in to (allocating
some account-specific state for) an application (see above for args desc.)
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeApplicationOptInTx(int64_t appIdx, AlgoSdkBytesArray* _Nullable appArgs, AlgoSdkStringArray* _Nullable accounts, AlgoSdkInt64Array* _Nullable foreignApps, AlgoSdkInt64Array* _Nullable foreignAssets, AlgoSdkAppBoxRefArray* _Nullable boxRefs, AlgoSdkSuggestedParams* _Nullable params, NSString* _Nullable sender, NSData* _Nullable note, NSError* _Nullable* _Nullable error);

/**
 * MakeApplicationUpdateTx makes a transaction for updating an application's programs (see above for args desc.)
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeApplicationUpdateTx(int64_t appIdx, AlgoSdkBytesArray* _Nullable appArgs, AlgoSdkStringArray* _Nullable accounts, AlgoSdkInt64Array* _Nullable foreignApps, AlgoSdkInt64Array* _Nullable foreignAssets, AlgoSdkAppBoxRefArray* _Nullable boxRefs, NSData* _Nullable approvalProg, NSData* _Nullable clearProg, AlgoSdkSuggestedParams* _Nullable params, NSString* _Nullable sender, NSData* _Nullable note, NSError* _Nullable* _Nullable error);

/**
 * MakeAssetAcceptanceTxn creates a tx for marking an account as willing to accept the given asset
- account is a checksummed, human-readable address that will send the transaction and begin accepting the asset
- note is an arbitrary byte array
- index is the asset index
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeAssetAcceptanceTxn(NSString* _Nullable account, NSData* _Nullable note, AlgoSdkSuggestedParams* _Nullable params, int64_t index, NSError* _Nullable* _Nullable error);

/**
 * MakeAssetConfigTxn creates a tx template for changing the
keys for an asset. An empty string means a zero key (which
cannot be changed after becoming zero); to keep a key
unchanged, you must specify that key.
- account is a checksummed, human-readable address for which we register the given participation key.
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeAssetConfigTxn(NSString* _Nullable account, NSData* _Nullable note, AlgoSdkSuggestedParams* _Nullable params, int64_t index, NSString* _Nullable newManager, NSString* _Nullable newReserve, NSString* _Nullable newFreeze, NSString* _Nullable newClawback, NSError* _Nullable* _Nullable error);

/**
 * MakeAssetCreateTxn constructs an asset creation transaction using the passed parameters.
- account is a checksummed, human-readable address which will send the transaction.
- note is a byte array
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeAssetCreateTxn(NSString* _Nullable account, NSData* _Nullable note, AlgoSdkSuggestedParams* _Nullable params, AlgoSdkUint64* _Nullable total, int32_t decimals, BOOL defaultFrozen, NSString* _Nullable manager, NSString* _Nullable reserve, NSString* _Nullable freeze, NSString* _Nullable clawback, NSString* _Nullable unitName, NSString* _Nullable assetName, NSString* _Nullable url, NSData* _Nullable metadataHash, NSError* _Nullable* _Nullable error);

/**
 * MakeAssetDestroyTxn creates a tx template for destroying an asset, removing it from the record.
All outstanding asset amount must be held by the creator, and this transaction must be issued by the asset manager.
- account is a checksummed, human-readable address that will send the transaction; it also must be the asset manager
- index is the asset index
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeAssetDestroyTxn(NSString* _Nullable account, NSData* _Nullable note, AlgoSdkSuggestedParams* _Nullable params, int64_t index, NSError* _Nullable* _Nullable error);

/**
 * MakeAssetFreezeTxn constructs a transaction that freezes or unfreezes an account's asset holdings
It must be issued by the freeze address for the asset
- account is a checksummed, human-readable address which will send the transaction.
- note is an optional arbitrary byte array
- assetIndex is the index for tracking the asset
- target is the account to be frozen or unfrozen
- newFreezeSetting is the new state of the target account
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeAssetFreezeTxn(NSString* _Nullable account, NSData* _Nullable note, AlgoSdkSuggestedParams* _Nullable params, int64_t assetIndex, NSString* _Nullable target, BOOL newFreezeSetting, NSError* _Nullable* _Nullable error);

/**
 * MakeAssetRevocationTxn creates a tx for revoking an asset from an account and sending it to another
- account is a checksummed, human-readable address; it must be the revocation manager / clawback address from the asset's parameters
- target is a checksummed, human-readable address; it is the account whose assets will be revoked
- recipient is a checksummed, human-readable address; it will receive the revoked assets
- amount defines the number of assets to clawback
- index is the asset index
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeAssetRevocationTxn(NSString* _Nullable account, NSString* _Nullable target, AlgoSdkUint64* _Nullable amount, NSString* _Nullable recipient, NSData* _Nullable note, AlgoSdkSuggestedParams* _Nullable params, int64_t index, NSError* _Nullable* _Nullable error);

/**
 * MakeAssetTransferTxn creates a tx for sending some asset from an asset holder to another user
the recipient address must have previously issued an asset acceptance transaction for this asset
- account is a checksummed, human-readable address that will send the transaction and assets
- recipient is a checksummed, human-readable address what will receive the assets
- closeAssetsTo is a checksummed, human-readable address that behaves as a close-to address for the asset transaction; the remaining assets not sent to recipient will be sent to closeAssetsTo. Leave blank for no close-to behavior.
- amount is the number of assets to send
- note is an arbitrary byte array
- creator is the address of the asset creator
- index is the asset index
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeAssetTransferTxn(NSString* _Nullable account, NSString* _Nullable recipient, NSString* _Nullable closeAssetsTo, AlgoSdkUint64* _Nullable amount, NSData* _Nullable note, AlgoSdkSuggestedParams* _Nullable params, int64_t index, NSError* _Nullable* _Nullable error);

/**
 * MakeBasicAccountSigner creates a TransactionSigner for a basic account from a private key.
 */
FOUNDATION_EXPORT id<AlgoSdkTransactionSigner> _Nullable AlgoSdkMakeBasicAccountSigner(NSData* _Nullable sk, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeBid(NSString* _Nullable bidderAddress, int64_t bidAmount, int64_t maxPrice, int64_t bidID, NSString* _Nullable auctionAddress, int64_t auctionID, NSError* _Nullable* _Nullable error);

/**
 * MakeLogicSigAccountDelegatedSign creates a new delegated LogicSigAccount. This
type of LogicSig has the authority to sign transactions on behalf of another
account, called the delegating account. If the delegating account is a
multisig account, use MakeLogicSigAccountDelegatedMsig instead.

This version of the function takes the signer address, `signer`, and its signature over the
program, `signature`. See LogicSigProgramForSigning to calculate the bytes that must
be signed. If you instead wish to provide the private key and sign directly, use
MakeLogicSigAccountDelegatedSign.
 */
FOUNDATION_EXPORT AlgoSdkLogicSigAccount* _Nullable AlgoSdkMakeLogicSigAccountDelegatedAttachSig(NSData* _Nullable program, AlgoSdkBytesArray* _Nullable args, NSString* _Nullable signer, NSData* _Nullable signature, NSError* _Nullable* _Nullable error);

/**
 * MakeLogicSigAccountDelegatedMsig creates a new delegated LogicSigAccount.
This type of LogicSig has the authority to sign transactions on behalf of
another account, called the delegating account. Use this function if the
delegating account is a multisig account, otherwise use of one MakeLogicSigAccountDelegatedSign
or MakeLogicSigAccountDelegatedAttachSig.

The parameter msigAccount is the delegating multisig account.

You must use the methods AppendSignMultisigSignature or AppendAttachMultisigSignature on the
returned LogicSigAccount to add signatures from the members of the multisig account. The multisig
account's threshold for signatures must be met for this to be a valid delegated LogicSig.
 */
FOUNDATION_EXPORT AlgoSdkLogicSigAccount* _Nullable AlgoSdkMakeLogicSigAccountDelegatedMsig(NSData* _Nullable program, AlgoSdkBytesArray* _Nullable args, AlgoSdkMultisigAccount* _Nullable msigAccount, NSError* _Nullable* _Nullable error);

/**
 * MakeLogicSigAccountDelegatedSign creates a new delegated LogicSigAccount. This
type of LogicSig has the authority to sign transactions on behalf of another
account, called the delegating account. If the delegating account is a
multisig account, use MakeLogicSigAccountDelegatedMsig instead.

This version of the function takes the private key of the delegating account, `signerSk`, and
signs the program with that key. If you instead wish to provide the signature, use
MakeLogicSigAccountDelegatedAttachSig.
 */
FOUNDATION_EXPORT AlgoSdkLogicSigAccount* _Nullable AlgoSdkMakeLogicSigAccountDelegatedSign(NSData* _Nullable program, AlgoSdkBytesArray* _Nullable args, NSData* _Nullable signerSk, NSError* _Nullable* _Nullable error);

/**
 * MakeLogicSigAccountEscrow creates a new escrow LogicSigAccount.
The address of this account will be a hash of its program.
 */
FOUNDATION_EXPORT AlgoSdkLogicSigAccount* _Nullable AlgoSdkMakeLogicSigAccountEscrow(NSData* _Nullable program, AlgoSdkBytesArray* _Nullable args, NSError* _Nullable* _Nullable error);

/**
 * MakeLogicSigAccountSigner creates a TransactionSigner for a LogicSigAccount.
 */
FOUNDATION_EXPORT id<AlgoSdkTransactionSigner> _Nullable AlgoSdkMakeLogicSigAccountSigner(AlgoSdkLogicSigAccount* _Nullable ls);

/**
 * MakeMultiSigAccountTransactionSigner creates a TransactionSigner for a MultisigAccount with the
given component account private keys.

There must be enough private keys to meet the multisig threshold.
 */
FOUNDATION_EXPORT id<AlgoSdkTransactionSigner> _Nullable AlgoSdkMakeMultiSigAccountTransactionSigner(AlgoSdkMultisigAccount* _Nullable msig, AlgoSdkBytesArray* _Nullable sks, NSError* _Nullable* _Nullable error);

/**
 * MakeMultisigAccount creates a new instance of a MultiSig account. The order of the addresses matters.
 */
FOUNDATION_EXPORT AlgoSdkMultisigAccount* _Nullable AlgoSdkMakeMultisigAccount(long version, long threshold, AlgoSdkStringArray* _Nullable addrs, NSError* _Nullable* _Nullable error);

/**
 * MakePaymentTxn constructs a payment transaction using the passed parameters.
`from` and `to` addresses should be checksummed, human-readable addresses
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakePaymentTxn(NSString* _Nullable from, NSString* _Nullable to, AlgoSdkUint64* _Nullable amount, NSData* _Nullable note, NSString* _Nullable closeRemainderTo, AlgoSdkSuggestedParams* _Nullable params, NSError* _Nullable* _Nullable error);

/**
 * MakeRekeyTxn constructs a rekey transaction using the passed parameters.
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMakeRekeyTxn(NSString* _Nullable from, NSString* _Nullable rekeyTo, AlgoSdkSuggestedParams* _Nullable params, NSError* _Nullable* _Nullable error);

// skipped function MakeUint64 with unsupported parameter or return types


/**
 * MergeMultisigTransactions merges multiple partially-signed transactions into a single transaction.
The transactions to be merged must be signed by the same MultisigAccount. See
SignMultisigTransaction and AttachMultisigSignature for creating partially-signed transactions.
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMergeMultisigTransactions(NSData* _Nullable encodedSignedTx1, NSData* _Nullable encodedSignedTx2, NSError* _Nullable* _Nullable error);

/**
 * MnemonicFromKey converts a 32-byte key into a 25 word mnemonic. The generated
mnemonic includes a checksum. Each word in the mnemonic represents 11 bits
of data, and the last 11 bits are reserved for the checksum.
 */
FOUNDATION_EXPORT NSString* _Nonnull AlgoSdkMnemonicFromKey(NSData* _Nullable key, NSError* _Nullable* _Nullable error);

/**
 * MnemonicFromMasterDerivationKey is a helper that converts an MDK to a
human-readable mnemonic
 */
FOUNDATION_EXPORT NSString* _Nonnull AlgoSdkMnemonicFromMasterDerivationKey(NSData* _Nullable mdk, NSError* _Nullable* _Nullable error);

/**
 * MnemonicFromPrivateKey is a helper that converts an ed25519 private key to a
human-readable mnemonic
 */
FOUNDATION_EXPORT NSString* _Nonnull AlgoSdkMnemonicFromPrivateKey(NSData* _Nullable sk, NSError* _Nullable* _Nullable error);

/**
 * MnemonicToKey converts a mnemonic generated using this library into the
source key used to create it. It returns an error if the passed mnemonic has
an incorrect checksum, if the number of words is unexpected, or if one of the
passed words is not found in the words list.
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMnemonicToKey(NSString* _Nullable mnemonicStr, NSError* _Nullable* _Nullable error);

/**
 * MnemonicToMasterDerivationKey is a helper that converts a mnemonic directly
to a master derivation key
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMnemonicToMasterDerivationKey(NSString* _Nullable mnemonicStr, NSError* _Nullable* _Nullable error);

/**
 * MnemonicToPrivateKey is a helper that converts a mnemonic directly to an
ed25519 private key
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkMnemonicToPrivateKey(NSString* _Nullable mnemonicStr, NSError* _Nullable* _Nullable error);

/**
 * NewAddMethodCallParams creates a new AddMethodCallParams object.

onComplete is the OnCompletion action to take for this application call. The accepted values are:
* 0 - NoOp
* 1 - OptIn
* 2 - CloseOut
* 3 - ClearState
* 4 - UpdateApplication
* 5 - DeleteApplication
 */
FOUNDATION_EXPORT AlgoSdkAddMethodCallParams* _Nullable AlgoSdkNewAddMethodCallParams(int64_t appID, long onComplete, NSString* _Nullable methodJson, AlgoSdkStringArray* _Nullable accounts, AlgoSdkInt64Array* _Nullable foreignApps, AlgoSdkInt64Array* _Nullable foreignAssets, AlgoSdkAppBoxRefArray* _Nullable boxRefs, AlgoSdkSuggestedParams* _Nullable txnParams, NSData* _Nullable note, NSString* _Nullable sender, id<AlgoSdkTransactionSigner> _Nullable signer, NSError* _Nullable* _Nullable error);

/**
 * NewAtomicTransactionComposer creates a new AtomicTransactionComposer.
 */
FOUNDATION_EXPORT AlgoSdkAtomicTransactionComposer* _Nullable AlgoSdkNewAtomicTransactionComposer(void);

/**
 * ParseABIType parses a string into an ABIType.
 */
FOUNDATION_EXPORT AlgoSdkABIType* _Nullable AlgoSdkParseABIType(NSString* _Nullable typeString, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSData* _Nullable AlgoSdkSignBid(NSData* _Nullable sk, NSData* _Nullable encodedBid, NSError* _Nullable* _Nullable error);

/**
 * SignBytes signs the bytes and returns the signature
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkSignBytes(NSData* _Nullable sk, NSData* _Nullable bytesToSign, NSError* _Nullable* _Nullable error);

/**
 * SignLogicSigTransaction signs a transaction with a LogicSigAccount.

Note: any type of transaction can be signed by a LogicSig, but the network will reject the
transaction if the LogicSig's program declines the transaction.
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkSignLogicSigTransaction(AlgoSdkLogicSigAccount* _Nullable account, NSData* _Nullable encodedTx, NSError* _Nullable* _Nullable error);

/**
 * SignMultisigTransaction signs and contributes a single signature to a transaction from a
MultisigAccount. The transaction will only be properly signed once the MultiSigAccount threshold
has been reached. MergeMultisigTransactions can be used to merge multiple partially-signed
transactions into a single transaction.

The argument `sk` must be the private key of one of the contributing addresses of the MultisigAccount.
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkSignMultisigTransaction(NSData* _Nullable sk, AlgoSdkMultisigAccount* _Nullable account, NSData* _Nullable encodedTx, NSError* _Nullable* _Nullable error);

/**
 * SignTransaction accepts a private key and a transaction, and returns the
bytes of a signed txn.
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkSignTransaction(NSData* _Nullable sk, NSData* _Nullable encodedTx, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSData* _Nullable AlgoSdkToKey(NSString* _Nullable mnemonic, NSError* _Nullable* _Nullable error);

/**
 * TransactionJsonToMsgpack converts a json-encoded Transaction to a
msgpack-encoded Transaction
 */
FOUNDATION_EXPORT NSData* _Nullable AlgoSdkTransactionJsonToMsgpack(NSString* _Nullable jsonTxn, NSError* _Nullable* _Nullable error);

/**
 * TransactionMsgpackToJson converts a msgpack-encoded Transaction to a
json-encoded Transaction
 */
FOUNDATION_EXPORT NSString* _Nonnull AlgoSdkTransactionMsgpackToJson(NSData* _Nullable msgpTxn, NSError* _Nullable* _Nullable error);

/**
 * VerifyGroupID verifies that an atomic group of transactions all contain the correct group ID
 */
FOUNDATION_EXPORT BOOL AlgoSdkVerifyGroupID(AlgoSdkBytesArray* _Nullable txns, BOOL* _Nullable valid, NSError* _Nullable* _Nullable error);

@class AlgoSdkTransactionSigner;

/**
 * TransactionSigner is an interface which can sign transactions from an atomic transaction group.

SignTransactions(txGroup,indexesToSign) signs the transactions in txGroup at the indexes
specified in indexesToSign.

Equals(other) returns true if the two signers are equivalent.
 */
@interface AlgoSdkTransactionSigner : NSObject <goSeqRefInterface, AlgoSdkTransactionSigner> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BOOL)equals:(id<AlgoSdkTransactionSigner> _Nullable)other;
- (AlgoSdkBytesArray* _Nullable)signTransactions:(AlgoSdkBytesArray* _Nullable)txGroup indexesToSign:(AlgoSdkInt64Array* _Nullable)indexesToSign error:(NSError* _Nullable* _Nullable)error;
@end

#endif
