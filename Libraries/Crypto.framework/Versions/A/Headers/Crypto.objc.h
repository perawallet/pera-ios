// Objective-C API for talking to github.com/algorand/go-algorand-sdk/crypto Go package.
//   gobind -lang=objc github.com/algorand/go-algorand-sdk/crypto
//
// File is generated by gobind. Do not edit.

#ifndef __Crypto_H__
#define __Crypto_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class CryptoAccount;

/**
 * Account holds both the public and private information associated with an
Algorand address
 */
@interface CryptoAccount : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSData* _Nullable publicKey;
@property (nonatomic) NSData* _Nullable privateKey;
@property (nonatomic) NSData* _Nullable address;
@end

/**
 * AttachSignature accepts a signature and a transaction, and returns the bytes of a the signed transaction
 */
FOUNDATION_EXPORT NSData* _Nullable CryptoAttachSignature(NSData* _Nullable signature, NSData* _Nullable encodedTx, NSError* _Nullable* _Nullable error);

/**
 * AttachSignatureWithSigner accepts a signature, a transaction, and a signer address and returns the bytes of a the signed transaction
 */
FOUNDATION_EXPORT NSData* _Nullable CryptoAttachSignatureWithSigner(NSData* _Nullable signature, NSData* _Nullable encodedTx, NSString* _Nullable signer, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull CryptoGenerateAddressFromPublicKey(NSData* _Nullable pk, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull CryptoGenerateAddressFromSK(NSData* _Nullable sk, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSData* _Nullable CryptoGenerateSK(void);

/**
 * GetTxID takes an encoded txn and return the txid as string
 */
FOUNDATION_EXPORT NSString* _Nonnull CryptoGetTxID(NSData* _Nullable encodedTxn);

/**
 * RandomBytes fills the passed slice with randomness, and panics if it is
unable to do so
 */
FOUNDATION_EXPORT void CryptoRandomBytes(NSData* _Nullable s);

/**
 * SignBid accepts a private key and a bid, and returns the signature of the
bid under that key
 */
FOUNDATION_EXPORT NSData* _Nullable CryptoSignBid(NSData* _Nullable sk, NSData* _Nullable encodedBid, NSError* _Nullable* _Nullable error);

/**
 * SignTransaction accepts a private key and a transaction, and returns the
bytes of a signed txn.
 */
FOUNDATION_EXPORT NSData* _Nullable CryptoSignTransaction(NSData* _Nullable sk, NSData* _Nullable encodedTx, NSError* _Nullable* _Nullable error);

#endif
